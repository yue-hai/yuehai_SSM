<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <!-- spring 的配置文件，这里主要是和业务逻辑有关的配置 -->
    <!-- Spring 配置文件的核心点：数据源、与 mybatis 的整合，事务控制 -->

    <!-- spring 管理除控制器之外的组件 -->
    <context:component-scan base-package="com.yuehai">
        <!-- 排除掉控制器，扫描其他的组件 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- ================== 数据源 ================== -->

    <!-- 引入外部数据库的配置文件 -->
    <context:property-placeholder location="classpath:druid.properties" />
    <bean id="pooledDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}" />
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
    </bean>

    <!-- ================== 配置和MyBatis的整合 ================== -->

    <!--
        整合 MyBatis 的目的：
            1、spring 管理所有组件，mapper 的实现类。
                service -> Dao   @Autowired：自动注入 mapper
			2、spring 用来管理事务，spring 声明式事务
     -->
    <!-- 创建出 SqlSessionFactory 对象，让 spring ioc 一启动就代替我们创建 SqlSessionFactory 对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定 mybatis 全局配置文件的位置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- 指定数据源 -->
        <property name="dataSource" ref="pooledDataSource" />
        <!-- 指定 mybatis sql 映射文件的位置 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
    </bean>

    <!-- 配置扫描器，将 mybatis 接口的实现加入到 ioc 容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描所有dao接口的实现，加入到ioc容器中 -->
        <property name="basePackage" value="com.yuehai.ssm.dao" />
    </bean>

    <!-- 配置一个可以执行批量的 sqlSession -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
        <constructor-arg name="executorType" value="BATCH" />
    </bean>

    <!-- ================== 事务控制的配置 ================== -->

    <!-- spring 的事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 控制住数据源，管理数据库链接的所有事务，开启链接、事务提交、关闭链接等 -->
        <property name="dataSource" ref="pooledDataSource" />
    </bean>

    <!-- 开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式） -->
    <aop:config>
        <!-- 切入点表达式，哪些方法可能要切入事务 -->
        <aop:pointcut expression="execution(* com.yuehai.ssm.service..*(..))" id="txPoint"/>
        <!-- 配置事务增强 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

    <!-- 配置事务增强，事务如何切入；用 transactionManager 这个事务管理器控制事务 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 所有方法都是事务方法 -->
            <tx:method name="*"/>
            <!--以get开始的所有方法  -->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>


</beans>
